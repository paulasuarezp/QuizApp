[
    {
        "question": "Señale la respuesta correcta respecto a los siguientes estándares:",
        "options": [
            "El estándar de referencia CoBIT fue impulsado por organismos de estandarización internacionales, aunque fue desarrollado inicialmente en USA",
            "El estándar de referencia ISO 27002 fue impulsado por la industria y los profesionales de la auditoría IT, aunque fue desarrollado inicialmente en USA",
            "El estándar de referencia CoBIT fue impulsado por la industria y los profesionales de la auditoría IT, a nivel internacional",
            "El estándar de referencia ISO 27002 fue impulsado por organismos de estandarización internacionales, con esfuerzo también internacional"
        ],
        "answer": 3,
        "explanation": "El estándar ISO 27002 fue impulsado por organismos de estandarización internacionales, con esfuerzo también internacional. CoBIT, aunque desarrollado inicialmente en USA, ha sido adoptado a nivel internacional por la industria y profesionales de la auditoría IT."
    },
    {
        "question": "¿Cuál de los siguientes controles de seguridad son preventivos?",
        "options": [
            "Generación de logs en los sistemas de información",
            "Autenticación fuerte en accesos de eBanking",
            "Disponibilidad de Plan de Copias",
            "Las opciones A y B son correctas"
        ],
        "answer": 1,
        "explanation": "La autenticación fuerte en accesos de eBanking es un control preventivo, ya que evita accesos no autorizados. La generación de logs es un control de detección (no preventivo), y la disponibilidad de un Plan de Copias es un control correctivo. Por lo tanto, la opción correcta es B."
    },
    {
        "question": " ¿Cuál de los controles siguientes es el más típico del ciclo de vida de desarrollo de software?",
        "options": [
            "Separación de entornos de producción y administración",
            "Identificación de usuarios de la aplicación y permisos de acceso asociados a los mismos",
            "Securización de los servidores de desarrollo",
            "Prueba de la aplicación desarrollada frente a estándares de seguridad"
        ],
        "answer": 3,
        "explanation": "La prueba de la aplicación frente a estándares de seguridad (como OWASP o ISO 27034) es una práctica clave dentro del ciclo de vida de desarrollo seguro (SDLC). Las otras opciones son importantes, pero no son específicas de la fase de desarrollo como tal."
    },
    {
        "question": "Señale cuál de las siguientes pruebas NO es una prueba de cumplimiento",
        "options": [
            "Verificar los resultados de un war-driving",
            "Verificar la existencia de procedimientos operativos de los sistemas de información auditados",
            "Definición de los perímetros de seguridad física y de los controles de seguridad que deben ser aplicados en los puntos de acceso entre ellos",
            "Verificar la existencia de logs de aplicación de parches."
        ],
        "answer": 2,
        "explanation": "Las pruebas de cumplimiento verifican el seguimiento de normativas o políticas. 'Verificar war-driving', 'existencia de procedimientos' y 'logs de parches' son ejemplos de ello, ya que auditan acciones concretas. Sin embargo, 'Definición de perímetros y controles' es una actividad de diseño, no de verificación, por lo que no es una prueba de cumplimiento."
    },
    {
        "question": "¿Cuál de las siguientes pruebas de auditoría no es adecuada para verificar la implantación de controles sobre planificación de Seguridad o IT?",
        "options": [
            "Verificar la existencia de un documento titulado 'Plan de Seguridad'",
            "Verificar que la función de planificación IT está asignada formalmente a la Directiva de la compañía",
            "La organización está realizando acciones de mejora a largo plazo",
            "Se han definido indicadores de aplicación de seguridad"
        ],
        "answer": 2,
        "explanation": "La opción C ('La organización está realizando acciones de mejora a largo plazo') no es una prueba directa de auditoría para verificar controles de planificación, sino un resultado potencial de dicha planificación. Las otras opciones verifican elementos concretos de la planificación (documentos, asignación de funciones e indicadores)."
    },
    {
        "question": "¿Cuál de las siguientes afirmaciones es verdadera en relación a la auditoría informática?",
        "options": [
            "Es el proceso que determinará si un sistema informático lleva a cabo los fines de la organización, entre otros muchos aspectos",
            "Es el proceso exclusivamente técnico de agrupar y evaluar evidencias para determinar si se utilizan de forma eficiente los recursos",
            "Es el proceso de recoger, agrupar y evaluar evidencias para determinar si un sistema informático salvaguarda los activos, mantiene la integridad de los datos, utilizando de forma eficiente los recursos independientemente de los fines de la organización",
            "Es el proceso exclusivamente técnico de recoger, agrupar y evaluar evidencias para determinar si un sistema informático salvaguarda los activos, mantiene la integridad de los datos, utilizando de forma eficiente los recursos"
        ],
        "answer": 0,
        "explanation": "La opción A es la más completa, ya que la auditoría informática evalúa tanto el cumplimiento de los objetivos organizacionales como aspectos técnicos (seguridad, integridad y eficiencia). Las otras opciones son limitadas (excluyen fines organizacionales o se centran solo en lo técnico)."
    },
    {
        "question": "Las implementaciones de recolección de log de seguridad requieren qué mecanismos adicionales de protección para mitigar los ataques de divulgación:",
        "options": [
            "Generación e intercambio de identificadores de sesión únicos",
            "Seguridad de la capa de transporte",
            "Gestión de derechos digitales (DRM)",
            "Prevención de la pérdida de datos"
        ],
        "answer": 1,
        "explanation": "La opción B (Seguridad de la capa de transporte, como TLS) es clave para proteger logs durante su transmisión. DRM (C) y prevención de pérdida (D) son relevantes pero no específicos para logs, mientras que los identificadores de sesión (A) no mitigan divulgación."
    },
    {
        "question": "Cual son de forma general las práctica de seguridad del software más aplicada:",
        "options": [
            "Pruebas de Penetración",
            "Análisis estático de código fuente",
            "Análisis hibrido",
            "Pruebas de escaneos de bugs"
        ],
        "answer": 1,
        "explanation": "El análisis estático de código (B) es la práctica más aplicada por su integración temprana en el SDLC y herramientas automatizadas. Las pruebas de penetración (A) y escaneos de bugs (D) son posteriores, y el análisis híbrido (C) combina técnicas pero es menos común."
    },
    {
        "question": "A cuál de los elementos clave de un proceso de S-SDLC le corresponde la siguiente actividad 'Son correctas suposiciones del desarrollador acerca de todos los cambios de estado posibles en el software':",
        "options": [
            "Integración de forma segura de los módulos y componentes del software",
            "Herramientas de apoyo al desarrollo",
            "Hitos de control en las fases del SDLC",
            "Arquitectura y diseño adecuados"
        ],
        "answer": 3,
        "explanation": "La opción D (Arquitectura y diseño adecuados) es correcta, ya que esta actividad implica validar supuestos durante el diseño para evitar vulnerabilidades. Las otras opciones no se enfocan en la fase de diseño conceptual."
    },
    {
        "question": "El incorporar una característica en la aplicación como 'Guardar información en archivos binarios' corresponde al Principio de diseño:",
        "options": [
            "Entorno de producción o ejecución inseguro",
            "Fallar de Forma Segura",
            "Diseño de software resistente",
            "La seguridad por oscuridad: error"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta porque confiar en formatos binarios (no legibles) como medida de seguridad es un ejemplo del anti-patrón 'seguridad por oscuridad'. Los otros principios no aplican: no se trata de entornos inseguros (A), resistencia (C) ni fallos seguros (B)."
    },
    {
        "question": "Señalar la respuesta incorrecta. Unas pruebas de seguridad son consideradas 'Open Source Security Testing Methodology Manual (OSSTMM)' si es:",
        "options": [
            "Válido más allá del período de tiempo «actual»",
            "Basado en el mérito del testador y analista, y no en marcas comerciales",
            "Exhaustivo",
            "Concordante con leyes internacionales"
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta porque el OSSTMM se enfoca en metodologías técnicas y éticas, no en cumplimiento legal. Las otras opciones son principios clave del OSSTMM: independencia de marcas (B), validez temporal (A) y exhaustividad (C)."
    },
    {
        "question": "Señalar la respuesta incorrecta. Entre los tipos de auditorías técnicas de seguridad tenemos:",
        "options": [
            "Auditorías de seguridad internas",
            "Auditorías de redes WIFI",
            "Auditorías de aplicaciones Web",
            "Ninguna de las anteriores"
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta porque las opciones A, B y C son ejemplos válidos de auditorías técnicas. 'Ninguna de las anteriores' no aplica aquí."
    },
    {
        "question": "Señalar la respuesta correcta. Una distinción que puede hacerse entre prueba de cumplimiento y prueba sustantiva es que la prueba de cumplimiento prueba:",
        "options": [
            "Detalla, mientras que la prueba sustantiva prueba los procedimientos",
            "Controla, mientras que la prueba sustantiva prueba los detalles",
            "Planea, mientras que la prueba sustantiva prueba procedimientos",
            "Para los requerimientos regulatorios, mientras que la prueba sustantiva prueba las validaciones"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta: las pruebas de cumplimiento verifican controles (ej. políticas), mientras que las sustantivas examinan detalles (ej. transacciones). Las otras opciones confunden los roles de cada prueba."
    },
    {
        "question": "Señalar la respuesta correcta. Un auditor de SI está realizando una auditoría a un servidor de copias de respaldo administrado desde una ubicación remota. El auditor revisa los logs y descubre un caso en el cual el inicio de sesión falló, afectando las copias. ¿Qué debería hacer el auditor?",
        "options": [
            "Emitir un hallazgo de auditoría",
            "Solicitar una explicación de la gerencia de SI",
            "Revisar las clasificaciones de datos guardados en el servidor",
            "Ampliar la muestra de logs revisados"
        ],
        "answer": 3,
        "explanation": "La opción D es la más adecuada: ampliar la muestra asegura que el fallo no es un caso aislado antes de reportarlo. Emitir hallazgos (A) o solicitar explicaciones (B) sería prematuro sin más evidencia."
    },
    {
        "question": "Señalar la respuesta correcta. Según Ron Weber, la auditoría de sistemas de información es:",
        "options": [
            "Es la revisión independiente de los test de intrusión",
            "Ron Weber estableció las bases del control interno informático. No definió nunca la auditoría informática",
            "La auditoría de Sistemas de Información es el proceso de recoger, agrupar y evaluar evidencias para determinar si un sistema informático salvaguarda los activos, mantiene la integridad de los datos, lleva a cabo los fines de la organización y utiliza eficientemente los recursos",
            "Todas las anteriores"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta: Ron Weber definió la auditoría de SI como un proceso integral (seguridad, integridad, eficiencia y fines organizacionales). Las otras opciones son incompletas o incorrectas."
    },
    {
        "question": "Señalar la respuesta correcta. En materia de Planes de Contingencia, y la auditoría de controles de seguridad en esta área, pueden considerarse como controles adecuados:",
        "options": [
            "La existencia de un Plan de Copias",
            "La realización periódica de pruebas de contingencia",
            "La documentación de un procedimiento de actuación ante crisis",
            "Todas las anteriores afirmaciones son ciertas"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta: un Plan de Copias (A), pruebas periódicas (B) y procedimientos documentados (C) son controles esenciales para la contingencia."
    },
    {
        "question": "Señalar la respuesta correcta. El desarrollo de software seguro y confiable requiere la adopción de un proceso sistemático que aborde la seguridad en cada fase de su ciclo de vida. Se debe integrar en el mismo dos tipos de actividades:",
        "options": [
            "Seguimiento de unos principios de calidad",
            "Una serie de buenas prácticas de diseño",
            "Seguimiento de unos principios de diseño seguro y una serie de buenas prácticas de seguridad",
            "Ninguna de las anteriores"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta: combinar principios de diseño seguro (ej. mínimo privilegio) con buenas prácticas (ej. revisión de código) es clave en el SDLC. Las otras opciones son parciales."
    },
    {
        "question": "Señalar la respuesta correcta. Cuando el software es capaz de resistir ataques recuperándose hasta un nivel mínimo de servicio preestablecido y sin violar la política de seguridad, se dice que exhibe:",
        "options": [
            "Fiabilidad",
            "Resiliencia",
            "Recuperación",
            "Robustez"
        ],
        "answer": 1,
        "explanation": "La opción B (Resiliencia) es correcta: describe la capacidad de recuperación ante ataques manteniendo seguridad. Robustez (D) se enfoca en resistir fallos, no necesariamente ataques."
    },
    {
        "question": "Señalar la respuesta incorrecta. Ejemplo de errores comunes al aplicar el principio de 'Mínimo Privilegio':",
        "options": [
            "Aplicación de derechos de administrador",
            "Usuarios con derechos de administrador",
            "Instalación de aplicaciones y servicios con el usuario de administrador",
            "Servicios y procesos con privilegios por tiempo definido"
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta porque limitar privilegios en el tiempo es una buena práctica. Las otras opciones son errores típicos (asignación excesiva de privilegios)."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los datos concretos a proteger según las normas PCI DSS son los siguientes:",
        "options": [
            "Datos del titular de la tarjeta",
            "Datos de la entidad a la que se realiza el pago",
            "Datos confidenciales de autenticación",
            "Contenido completo de la pista (datos de la banda magnética o datos equivalentes que están en un chip)"
        ],
        "answer": 1,
        "explanation": "La opción B es incorrecta porque PCI DSS no protege datos de la entidad receptora del pago, sino únicamente datos del titular (A), credenciales de autenticación (C) y datos de la banda magnética/chip (D)."
    },
    {
        "question": "Señalar la respuesta correcta. Un objetivo de control puede estar cubierto por:",
        "options": [
            "Varios controles",
            "Varios riesgos",
            "Varias pruebas",
            "Varias amenazas"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta: un objetivo de control (ej. proteger datos) puede requerir múltiples controles (ej. encriptación + acceso biométrico). Los riesgos (B) o amenazas (D) son lo que se mitiga, no lo que 'cubre' el objetivo."
    },
    {
        "question": "Señalar la respuesta correcta. Un departamento de auditoría interna, ¿de dónde tendría que colgar en el organigrama?",
        "options": [
            "De presidencia",
            "De seguridad",
            "De Informática",
            "De cualquier rama con tal de que se pueda demostrar su independencia en su trabajo y resultados"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta: la auditoría interna debe ser independiente. Aunque colgar de presidencia (A) es común, lo clave es garantizar imparcialidad, no la ubicación específica."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Tienen los empleados responsabilidad sobre las acciones de auditoría interna?",
        "options": [
            "Sí, pero solo para cuando exista una incidencia grave",
            "Sí, en todo momento se tendrían que poner a disposición de auditoría y facilitarles lo que requieran",
            "No",
            "A y B son correctas"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta: los empleados deben colaborar siempre con auditoría (no solo en incidentes graves). La opción A es incompleta y la C incorrecta."
    },
    {
        "question": "Señalar la respuesta correcta. La auditoría de la seguridad operativa/técnica abarca los conceptos de:",
        "options": [
            "Seguridad física, lógica y procedimental",
            "Seguridad de la infraestructura, lógica y las operaciones",
            "Seguridad física, lógica y las operaciones",
            "Todas las anteriores"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta: la seguridad operativa incluye física (accesos), lógica (controles de acceso) y operaciones (procesos). 'Procedimental' (A) es parte de las operaciones, e 'infraestructura' (B) es redundante."
    },
    {
        "question": "Señalar la respuesta correcta. El objetivo de la reducción de la superficie de ataque es:",
        "options": [
            "Minimizar el número de puntos expuestos en la superficie de ataque, que un usuario malintencionado puede descubrir e intentar explotar",
            "Minimizar el número de vulnerabilidades presentes en una aplicación",
            "Maximizar el número de herramientas de análisis estático de código utilizadas para analizar la implementación del código fuente de una aplicación",
            "Ninguna de las anteriores"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta: reducir la superficie de ataque implica limitar puntos expuestos (ej. puertos abiertos). La opción B se refiere a vulnerabilidades, no a superficie de ataque."
    },
    {
        "question": "Señalar la respuesta correcta. La propiedad de las aplicaciones para resistir a los ataques que intentan modificar o alterar los datos de manera no autorizada se denomina:",
        "options": [
            "Confidencialidad",
            "Integridad",
            "Disponibilidad",
            "Autorización"
        ],
        "answer": 1,
        "explanation": "La opción B (Integridad) es correcta: garantiza que los datos no sean alterados ilegítimamente. Confidencialidad (A) protege accesos no autorizados, y disponibilidad (C) asegura el acceso legítimo."
    },
    {
        "question": "Señalar la respuesta correcta. La validación de un Checksum puede utilizarse para satisfacer los siguientes requisitos:",
        "options": [
            "Confidencialidad",
            "Integridad",
            "Disponibilidad",
            "Autenticación"
        ],
        "answer": 1,
        "explanation": "La opción B (Integridad) es correcta: un checksum verifica que los datos no han sido alterados. No protege confidencialidad (A) ni autenticación (D)."
    },
    {
        "question": "Señalar la respuesta correcta. Los controles pueden NO estar por escrito:",
        "options": [
            "Efectivamente, los controles no documentados son los más rápidos",
            "No. Los controles deben estar documentados por escrito en su correspondiente procedimiento de control",
            "No importa que no estén por escrito. Un alto porcentaje de controles ni se conocen ni se documentan",
            "Los controles manuales son los únicos que no están por escrito"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta: los controles deben documentarse para ser auditables. Los controles no documentados (A, C) incumplen normas como ISO 27001, y los manuales (D) también requieren documentación."
    },
    {
        "question": "Señalar la respuesta correcta. En materia de Planes de Contingencia, y la auditoría de controles de seguridad en esta área, pueden considerarse como controles adecuados:",
        "options": [
            "La existencia de un Plan de Copias",
            "La realización periódica de pruebas de contingencia",
            "La documentación de un procedimiento de actuación ante crisis",
            "Todas las anteriores afirmaciones son ciertas"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta porque un Plan de Contingencia efectivo requiere: 1) Copias de seguridad (A), 2) Pruebas periódicas (B) para validar su eficacia, y 3) Procedimientos documentados (C) para garantizar una respuesta estructurada ante crisis."
    },
    {
        "question": "Señalar la respuesta correcta. El sistema de Gestión de la Seguridad de la Información-SGSI. ¿Cuál tiene PDCA?",
        "options": [
            "La ISO 27001 y la ISO 27002",
            "Solo la ISO 27002",
            "La ISO 27001",
            "Ninguna de las anteriores"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta. La ISO 27001 implementa el ciclo PDCA (Plan-Do-Check-Act) para mejorar continuamente el SGSI. La ISO 27002 es un catálogo de buenas prácticas, no un estándar de gestión con PDCA."
    },
    {
        "question": "Durante la auditoría de un plan de continuidad del negocio, un auditor de SI encontró que, a pesar de que todos los departamentos están alojados en el mismo edificio, cada departamento tenía un plan separado de continuidad del negocio. El auditor de SI recomendó que se reconciliaran los planes de continuidad del negocio. ¿Cuál de las áreas siguientes debería reconciliarse PRIMERO?",
        "options": [
            "Plan de evacuación",
            "Prioridades de recuperación",
            "Almacenamientos de backup",
            "Árbol de llamadas"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. Alinear las prioridades de recuperación es crítico para evitar conflictos en la ejecución del plan. Sin esto, otros elementos (ej. backups o árbol de llamadas) carecerían de coordinación."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Cuál es la definición breve de Auditoría de Sistemas de Información?",
        "options": [
            "Es la revisión vinculada del control y la evaluación",
            "Es la revisión independiente de la auditoría",
            "Es la revisión independiente del control interno informático",
            "Ninguna de las anteriores"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta. La auditoría de SI evalúa de forma independiente los controles internos (seguridad, integridad, eficiencia), no solo 'vinculaciones' (A) o la auditoría misma (B)."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Cuál es el control más importante para el CIO(Chief Information Officer - Director de Informática)?",
        "options": [
            "El plan de seguridad alineado con el plan de medioambiente",
            "El plan estratégico de empresa alineado con el plan de TICs",
            "El plan de TICs no se alinea nunca con el plan estratégico de empresa",
            "El plan económico-financiero alineado con los periodos vacacionales"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. La alineación entre el plan estratégico empresarial y el de TICs es clave para garantizar que la tecnología soporte los objetivos del negocio. Las otras opciones son irrelevantes (D) o incorrectas (C)."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los objetivos de las pruebas de seguridad basadas en el riesgo:",
        "options": [
            "Verificar la capacidad de supervivencia del software ante la aparición de anomalías, errores y su manejo de las mismas mediante excepciones que minimicen el alcance e impacto de los daños que puedan resultar de los ataques",
            "Verificar la operación del software bajo en su entorno de producción",
            "Verificar la fiabilidad del software, en términos de comportamiento seguro y cambios de estado confiables.",
            "Verificar la falta de defectos y debilidades explotables"
        ],
        "answer": 1,
        "explanation": "La opción B es incorrecta. Las pruebas basadas en riesgo no se centran en la operación en producción (eso son pruebas funcionales), sino en identificar vulnerabilidades (D), resiliencia (A) y fiabilidad (C)."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Qué tipo de vulnerabilidad se comete en este código? main(int argc, char **argv){\nchar *buffer = (char *)malloc(101);\nint i;\nfor (i = 0; i < 10; i++)\nstrncat(buffer, argv[i], 10);\n}",
        "options": [
            "Format String",
            "Buffer Overflows",
            "Integer Overflow",
            "Use after free"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. El código usa strncat en un bucle sin verificar el tamaño del buffer, lo que puede causar desbordamiento. No hay format strings (A), integer overflows (C) ni liberación de memoria (D)."
    },
    {
        "question": "Señalar la respuesta incorrecta. Consideraciones sobre potenciales vulnerabilidades de Java:",
        "options": [
            "Seguridad de tipos. Los campos que son declarados privados o protegidos, o que tienen protección, por defecto, deberían ser públicamente accesibles",
            "Campos públicos. Un campo que es declarado público directamente puede ser accedido por cualquier parte de un programa Java y puede ser modificado por las mismas (a no ser que el campo sea declarado como final).",
            "Serialización. Esta facilidad posibilita que el estado del programa sea capturado y convertido en un byte stream que puede ser restaurado por la operación inversa, que es la deserialización",
            "La JVM en sí misma a menudo está escrita en C para una plataforma dada. Esto quiere decir que sin la atención cuidadosa a detalles de puesta en práctica, la JVM en sí misma no susceptible a problemas de desbordamiento"
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta. La JVM, al estar escrita en C, es susceptible a desbordamientos si no se implementa cuidadosamente. Las otras opciones son verdaderas: A describe un error de diseño, B y C son características de Java."
    },
    {
        "question": "Señale la respuesta correcta. Una prueba específica para entornos de eBanking",
        "options": [
            "Autenticación fuerte de usuarios en su acceso a la plataforma",
            "Verificación de interfaces existentes con pasarelas de pago bancarias",
            "Cifrado de discos duros y de comunicaciones",
            "Existencia y aplicabilidad de procedimientos operativos de manejo de la aplicación de eBanking"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. La verificación de interfaces con pasarelas de pago es específica de eBanking, ya que valida integridad en transacciones financieras. Aunque la autenticación fuerte (A) y el cifrado (C) son importantes, no son exclusivos de eBanking."
    },
    {
        "question": "Señalar la respuesta correcta. Dentro de Controles Generales, podemos afirmar que NO son Controles de Organización y Operación:",
        "options": [
            "Seguridad Lógica y Física, controles de procesamiento y Control de Presupuestos",
            "Procedimientos, separación de entornos y estándares y nomenclatura",
            "Seguridad Lógica y Física, controles de procesamiento y segregación de funciones",
            "Metodologías de SDLC, controles de edición y verificación y seguridad Lógica y Física"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta. El 'Control de Presupuestos' es un control financiero, no de organización/operación. Los otros grupos incluyen controles operativos típicos (ej. segregación de funciones en C o SDLC en D)."
    },
    {
        "question": "Señalar la respuesta incorrecta. El cálculo de código CVSS se realiza en base a tres tipos de métricas:",
        "options": [
            "Métricas base",
            "Métricas estadísticas",
            "Métricas temporales",
            "Métricas ambientales"
        ],
        "answer": 1,
        "explanation": "La opción B es incorrecta. CVSS usa métricas base (A), temporales (C) y ambientales (D), pero no 'estadísticas'. Esta métrica no existe en el estándar CVSS."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Qué es el Riesgo Inherente?",
        "options": [
            "Cuando un error material no se pueda evitar que suceda porque no existen controles compensatorios relacionados que se puedan establecer",
            "Cuando un error material no puede ser evitado o detectado en forma oportuna por el sistema de control interno",
            "Es el riesgo de que el auditor realice pruebas exitosas a partir de un procedimiento inadecuado. El auditor puede llegar a la conclusión de que no existen errores materiales cuando en realidad los hay",
            "Ninguna de las anteriores"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. El riesgo inherente existe independientemente de los controles internos. La opción A describe un riesgo residual, y la C se refiere a riesgo de auditoría."
    },
    {
        "question": "Señalar la respuesta correcta. De acuerdo con la metodología “Common Criteria ISO 15408 (CC)” el nivel de confianza se proporciona evidencia en cuanto a que la evaluación coincide con la descrita en la documentación:",
        "options": [
            "EAL1",
            "EAL3",
            "EAL4",
            "EAL5"
        ],
        "answer": 2,
        "explanation": "La opción C (EAL4) es correcta. Este nivel garantiza una verificación sistemática de diseño y pruebas, alineada con la documentación. EAL1-3 son menos rigurosos, y EAL5 requiere mayor profundidad."
    },
    {
        "question": "Señalar la respuesta correcta. Verificar que se está utilizando sistemas duplicados en los que se requiere muy alta disponibilidad se corresponde al área de la auditoría de un Plan de Recuperación ante Desastres:",
        "options": [
            "La resiliencia del sistema",
            "Copias de seguridad y restauración de datos",
            "Verificar la integridad y precisión del DRP",
            "Evaluar el desempeño del personal involucrado en el DRP"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta porque los sistemas duplicados son un mecanismo clave para garantizar resiliencia (continuidad operativa). Las copias de seguridad (B) y la verificación del DRP (C) son áreas diferentes."
    },
    {
        "question": "Señalar la respuesta correcta. Un activo de sistemas de información es:",
        "options": [
            "Cualquier elemento que trate información de manera activa",
            "Todo lo que no sea pasivo dentro de los sistemas de información",
            "Todo aquello que una entidad considera valioso por contener, procesar o generar información necesaria para el negocio de esta",
            "Todas las anteriores son falsas"
        ],
        "answer": 2,
        "explanation": "La opción C es correcta según estándares como ISO 27001: un activo es cualquier recurso valioso para el negocio por su relación con la información. Las opciones A y B son definiciones incompletas o incorrectas."
    },
    {
        "question": "Señalar la respuesta incorrecta. El alcance de una auditoria de dispositivos móviles debería comprender:",
        "options": [
            "Verificación de política de uso de dispositivos móviles y especificación del tipo de información, los tipos de dispositivos y servicios de información que proporcionan",
            "Control de acceso. Verificar que la sincronización de datos de los dispositivos móviles no esté configurada para acceder a archivos compartidos o unidades de red que contienen datos que están prohibidos por la política para el uso del móvil",
            "Entrevistas al administrador y operadores de red",
            "Capacitación y sensibilización. Verificar que la empresa tenga implementado un programa de concientización que aborde la importancia de asegurar física y lógicamente los dispositivos móviles"
        ],
        "answer": 2,
        "explanation": "La opción C es incorrecta porque las entrevistas a administradores de red no son específicas de la auditoría de dispositivos móviles (sí lo son las políticas, controles de acceso y capacitación)."
    },
    {
        "question": "Señalar la respuesta incorrecta. De acuerdo con ISACA (2019), los controles de seguridad física pueden clasificarse de la siguiente forma:",
        "options": [
            "Normativa",
            "Administrativos",
            "Técnicos",
            "Físicos"
        ],
        "answer": 0,
        "explanation": "La opción A es incorrecta porque ISACA clasifica los controles en administrativos (B), técnicos (C) y físicos (D). 'Normativa' no es una categoría válida según este marco."
    },
    {
        "question": "Señalar la respuesta correcta. Un test de intrusión puede ser una prueba de auditoría adecuada para los siguientes entornos:",
        "options": [
            "Continuidad de Negocio",
            "Técnica de Sistemas",
            "Seguridad Lógica",
            "Todas las opciones menos la a"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta porque los tests de intrusión evalúan vulnerabilidades técnicas (B) y lógicas (C), pero no son el método principal para auditar continuidad de negocio (A), que requiere pruebas de recuperación."
    },
    {
        "question": "Señalar la respuesta correcta. Un Sistema de Gestión de Seguridad de la Información - SGSI basado en ISO 27001:",
        "options": [
            "Está obsoleto. Hay que usar siempre COBIT",
            "Reordena la seguridad de los sistemas de información",
            "Permite que se reduzcan las emisiones de CO2 a la atmósfera",
            "Ninguna de las anteriores"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta: ISO 27001 reorganiza la seguridad mediante un enfoque sistemático (no es obsoleta ni sustituye a COBIT, y no tiene relación con emisiones de CO2)."
    },
    {
        "question": "Señalar la respuesta correcta. Una herramienta de análisis de código reporta que no existen vulnerabilidades para una aplicación revisada. La aplicación es distribuida y, un mes más tarde, una inyección SQL es anunciada de forma pública y, posteriormente, explotada. ¿Qué tipo de limitación de las herramientas de análisis de código se ha expuesto?",
        "options": [
            "Un falso positivo",
            "Un falso negativo",
            "Una vulnerabilidad específica de un lenguaje de programación",
            "Ninguna de las anteriores"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta: un 'falso negativo' ocurre cuando la herramienta no detecta una vulnerabilidad real (como la inyección SQL). Un falso positivo (A) sería reportar un problema inexistente."
    },
    {
        "question": "Señalar la respuesta correcta. Una de las perspectivas de las pruebas de seguridad basadas en el riesgo es la siguiente:",
        "options": [
            "Perspectiva atacante",
            "Perspectiva de la gerencia",
            "Perspectiva desarrollador",
            "Perspectiva usuario"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta: las pruebas basadas en riesgo adoptan la perspectiva del atacante para identificar vulnerabilidades explotables. Las otras perspectivas (gerencia, desarrollador, usuario) no son el enfoque principal."
    },
    {
        "question": "¿Qué incluye la seguridad del software?",
        "options": [
            "Patrones de codificación",
            "Principios de diseño seguro",
            "Casos de uso",
            "Buenas prácticas de codificación"
        ],
        "answer": 1,
        "explanation": "La opción B es correcta. La seguridad del software abarca principios de diseño seguro (como defensa en profundidad), no solo patrones (A) o prácticas (D). Los casos de uso (C) son funcionales, no de seguridad."
    },
    {
        "question": "¿Qué es un caso de abuso?",
        "options": [
            "Un escenario que ilustra de manera gráfica y textual potenciales fallos de seguridad ante especificas circunstancias.",
            "Una base de datos del MITRE",
            "Un escenario que ilustra de manera gráfica y textual funcionalidades de seguridad del software ante especificas circunstancias.",
            "Un patrón de diseño para desarrollador"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta. Un caso de abuso modela cómo un atacante podría explotar vulnerabilidades, a diferencia de casos de uso (C). MITRE (B) contiene vulnerabilidades, no casos de abuso."
    },
    {
        "question": "¿Cuál es la siguiente propiedad de seguridad: “capacidad que garantiza la posibilidad de imputar las acciones relacionadas en un software a la persona, entidad o proceso que la ha originado”?",
        "options": [
            "Robustez",
            "Resiliencia",
            "Autenticación",
            "Trazabilidad"
        ],
        "answer": 3,
        "explanation": "La opción D (Trazabilidad) es correcta. Permite rastrear acciones hasta su origen. La autenticación (C) verifica identidad, pero no registra acciones."
    },
    {
        "question": "El principal problema de herramientas de análisis estático:",
        "options": [
            "Falsos negativos que produce",
            "Gran cantidad de defectos que encuentra",
            "Reglas de la herramienta",
            "Falsos positivos que produce"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta. Los falsos positivos (reportar vulnerabilidades inexistentes) son el mayor desafío, requiriendo revisión manual. Los falsos negativos (A) son menos comunes."
    },
    {
        "question": "Indicar la utilidad de los Patrones de Ataque en la etapa de Especificacion de requisitos:",
        "options": [
            "Proporciona ejemplos de ataques que aprovechan las vulnerabilidades de la arquitectura elegida.",
            "Pueden ser utilizados para orientar las pruebas de seguridad del software en un contexto practico y realista identificando debilidades concretas para generar casos de prueba para cada componente.",
            "Permitira la seleccion de politicas de seguridad y configuraciones acordes a las amenazas obtenidas de los patrones de ataque.",
            "Ayuda a definir el comportamiento del sistema para prevenir o reaccionar ante un tipo específico de ataque probable."
        ],
        "answer": 3,
        "explanation": "La opción D es correcta. Los patrones ayudan a definir requisitos de seguridad proactivos. Las otras opciones aplican a fases posteriores (diseño/pruebas)."
    },
    {
        "question": "Con relación a la clasificación de controles internos, según su naturaleza podemos afirmar que:",
        "options": [
            "Son normalmente Detectivos, Correctivos y Preventivos. En ocasiones se incluyen los controles alternativos.",
            "Voluntarios, obligatorios, manuales, automáticos",
            "Voluntarios, obligatorios, manuales, automáticos, preventivos, detectivos y correctivos",
            "Controles generales, de aplicación, de área y legales"
        ],
        "answer": 0,
        "explanation": "La clasificación general es: detectivos, correctivos y preventivos; el resto de los controles entran en la parte de categorías. (Respuesta Test Tema 7)"
    },
    {
        "question": "En relación a la clasificación de controles internos, según su naturaleza podemos afirmar que:",
        "options": [
            "Los controles Detectivos, actúan sobre la causa de los riesgos con el fin de disminuir su probabilidad de ocurrencia",
            "Los controles Preventivos, se diseñan para descubrir un evento, irregularidad o resultado no previsto, alertan sobre la presencia de riesgos y permiten tomar medidas inmediatas, pudiendo ser manuales o automáticos",
            "Ambas son correctas",
            "Ambas son incorrectas"
        ],
        "answer": 3,
        "explanation": "La opción D es correcta. Estarían al revés: los preventivos actúan sobre causas (A incorrecta), y los detectivos descubren eventos (B incorrecta)."
    },
    {
        "question": "Al realizar una auditoria basada en el riesgo, ¿Qué tipo de evaluacion de riesgos realiza el auditor de un sistema de información como primer paso?",
        "options": [
            "Evaluación de riesgos inherentes",
            "Evaluación de riesgos de control",
            "Evaluación de riesgo de fraude",
            "Ninguna de las anteriores"
        ],
        "answer": 0,
        "explanation": "La opción A es correcta. Primero se evalúan riesgos inherentes (sin controles), luego riesgos residuales (con controles)."
    },
    {
        "question": "Señalar la respuesta correcta. Indicar la utilidad de los Patrones de Ataque en la etapa de Especificación de requisitos.",
        "options": [
            "Proporciona ejemplos de ataques que aprovechan las vulnerabilidades de la arquitectura elegida.",
            "Pueden ser utilizados para orientar las pruebas de seguridad del software en un contexto práctico y realista identificando debilidades concretas para generar casos de prueba para cada componente.",
            "Permitirá la selección de políticas de seguridad y configuraciones acordes a las amenazas obtenidas de los patrones de ataque.",
            "Ayuda a definir el comportamiento del sistema para prevenir o reaccionar ante un tipo específico de ataque probable"
        ],
        "answer": 3,
        "explanation": "Durante la especificación de requisitos, los patrones de ataque permiten anticipar comportamientos maliciosos y definir cómo el sistema debe prevenirlos o reaccionar. Esto ayuda a establecer requisitos de seguridad desde las primeras fases del S-SDLC."
    },
    {
        "question": "En relación a las metodologías de auditoría, podemos afirmar que:",
        "options": [
            "Realmente solo existe una y es basada en Riesgos o Risk Oriented Approach.",
            "Cada firma (empresa) de auditoría puede desarrollar la suya propia, siendo la más difundida la basada en riesgos EDR (ROA).",
            "La basada en cuestionarios o checklist es utilizada por auditores con experiencia pues se la envían por correo electrónico al cliente para que la complete.",
            "Ninguna de las anteriores."
        ],
        "answer": 1,
        "explanation": "Las metodologías pueden ser desarrolladas por cada firma de auditoría, siendo la más común la basada en riesgos (EDR/ROA). Así se personaliza la auditoría a cada contexto."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Qué metodología de auditoría se adapta mejor a las compañías?",
        "options": [
            "Cualquiera que tenga relación con los sistemas de información.",
            "La metodología marcada por entidades reconocidas como IAI, ISACA,…",
            "La que sea completa y este adecuada las necesidades de la compañía.",
            "Ninguna de las anteriores."
        ],
        "answer": 2,
        "explanation": "La metodología de auditoría más adecuada es la que se adapta a las necesidades y riesgos específicos de la organización, siendo completa y alineada con sus objetivos."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Por qué es necesario disponer de procedimientos de operación de las plataformas?",
        "options": [
            "Porque es necesario tener documentadas estas actividades para poder hacer pruebas de cumplimiento en los mismos",
            "Para que las tareas de administración puedan ser realizadas por todos los administradores, incluso para las nuevas incorporaciones o personal de menor experiencia",
            "Para que cualquier persona pueda realizar las funciones de administración de sistemas, siempre que encuentre los procedimientos que custodian los administradores",
            "Las opciones b y c son correctas"
        ],
        "answer": 0,
        "explanation": "Disponer de procedimientos operativos documentados es esencial para poder realizar pruebas de cumplimiento y verificar que se están ejecutando conforme a las políticas establecidas."
    },
    {
        "question": "Señalar la respuesta incorrecta. Se puede definir la seguridad del software como:",
        "options": [
            "El conjunto de principios de diseño y buenas prácticas a implantar, para detectar, prevenir y corregir los defectos de seguridad en el desarrollo y adquisición de sistemas.",
            "La confianza que el software, hardware y servicios funcionan conforme a los estándares",
            "Ninguna de las anteriores.",
            "El nivel de confianza de que el software funciona según lo previsto y está libre de vulnerabilidades, ya sea intencionada o no diseñada o insertada en el marco de la software"
        ],
        "answer": 1,
        "explanation": "La opción B es incorrecta porque no menciona específicamente la detección y corrección de vulnerabilidades, ni los requisitos de seguridad que debe cumplir un software confiable."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Cuál de los estándares de clasificación y gestión de vulnerabilidades incluye “Bases de datos con listas de comprobación de configuraciones de seguridad de productos”.",
        "options": [
            "CVRF.",
            "CVSS.",
            "NVD.",
            "CVE."
        ],
        "answer": 2,
        "explanation": "La National Vulnerability Database (NVD) incluye bases de datos con listas de comprobación de configuraciones seguras de productos, entre otras funciones de gestión de vulnerabilidades."
    },
    {
        "question": "Señalar la respuesta incorrecta. Cuando se realiza una auditoría de infraestructura de red, deben tenerse en cuenta los siguientes aspectos:",
        "options": [
            "Revisión de la instalación de los servidores.",
            "Revisión de planes de seguridad.",
            "Revisar la documentación de seguridad del software de sistema.",
            "Entrevistas al administrador y operadores de red."
        ],
        "answer": 2,
        "explanation": "Revisar la documentación de seguridad del software del sistema es más típico de una auditoría técnica de seguridad, no específica de infraestructura de red."
    },
    {
        "question": "Señalar la respuesta correcta. Un tipo de clasificación de controles puede ser:",
        "options": [
            "Controles Generales (Entrada de Datos, Tratamiento de Datos, Salida de Datos), Controles de Aplicación (Organización y Operación, Desarrollo de Sistemas y Documentación, Hardware y Software de Sistemas) y Controles por área",
            "Controles compensatorios y asumibles",
            "Controles Generales (Organización y Operación, Desarrollo de Sistemas y Documentación, Hardware y Software de Sistemas), Controles de Aplicación (Entrada de Datos, Tratamiento de Datos, Salida de Datos) y Controles por área",
            "Solo existen los controles de productos informáticos y por motivos legales"
        ],
        "answer": 2,
        "explanation": "La clasificación más común distingue entre Controles Generales (como desarrollo, operación y sistemas), Controles de Aplicación (como entrada/salida de datos) y controles por área o función específica."
    },
    {
        "question": "Señalar la respuesta correcta. Un auditor de SI que realiza una revisión de controles de acceso debería estar MENOS preocupado si:",
        "options": [
            "Las pistas de auditoría no estuvieran habilitadas",
            "Los programadores tuvieran acceso al entorno en vivo",
            "Los logons de grupo estuvieran siendo utilizados para funciones críticas",
            "El mismo usuario pudiera iniciar transacciones y también cambiar los parámetros relacionados."
        ],
        "answer": 0,
        "explanation": "La opción A es correcta. Aunque las pistas de auditoría son importantes, un auditor debería estar más preocupado por los accesos inapropiados a entornos críticos (B, C, D) que por la falta de auditoría, ya que esto puede ser subsanable con otros controles."
    },
    {
        "question": "Señalar la respuesta correcta. ¿En qué consiste el control de organización y operación: separación de entornos?",
        "options": [
            "En hacer copias de seguridad de los diferentes entornos/ambientes.",
            "En tener siempre solo 2 entornos/ambientes: 1 para desarrollo y otro para producción.",
            "En tener 3 ó 4 entornos/ambientes: desarrollo, testing, preproducción y explotación.",
            "En tener solo 2 entornos/ambientes donde la información se intercambia indistintamente."
        ],
        "answer": 2,
        "explanation": "La opción C es correcta. La separación de entornos implica tener múltiples entornos (desarrollo, testing, preproducción, producción) para evitar interferencias y garantizar la seguridad y estabilidad del software."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los requisitos de los servicios de seguridad debe especificar:",
        "options": [
            "Propiedades que el software debe exhibir.",
            "Nivel requerido de seguridad y salvaguardas de riesgo de las funciones de seguridad.",
            "Los controles y normas que rigen los procesos de desarrollo, implementación y operación del software.",
            "Están orientados hacia la reducción o eliminación de las vulnerabilidades del software, como validación de entradas, comprobación de límites de búfer, ejecución entornos aislados."
        ],
        "answer": 2,
        "explanation": "La opción C es incorrecta. Los requisitos de servicios de seguridad se centran en las propiedades y niveles de seguridad del software, no en los controles y normas de procesos de desarrollo, implementación y operación, que son más específicos de la gestión de seguridad."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los elementos clave de un proceso de S- SDLC son:",
        "options": [
            "Sostenimiento seguro.",
            "Herramientas de apoyo al desarrollo.",
            "Conocimientos de seguridad de los desarrolladores.",
            "Gestión de configuración del entorno de desarrollo."
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta. Aunque la gestión de configuración es importante, no es un elemento clave del proceso S-SDLC. Los otros elementos (A, B, C) son fundamentales para integrar la seguridad en el ciclo de vida del desarrollo de software."
    },
    {
        "question": "Señalar la respuesta incorrecta. En las pruebas del tipo “Análisis hibrido o Interactive Application Security Testing (IAST)”, se realizan tres tipos de análisis:",
        "options": [
            "Análisis de cobertura. Pone de manifiesto las interacciones entre las diferentes partes del programa.",
            "Análisis de inconsistencias, Permite buscar inconsistencia en la aplicación a probar.",
            "Análisis de patrones. Permite buscar patrones específicos en la ejecución del programa, tales como excepciones no capturadas, omisiones, errores de memoria dinámica y problemas de seguridad.",
            "Análisis de frecuencia de espectro. Revela las dependencias entre los componentes del programa."
        ],
        "answer": 3,
        "explanation": "La opción D es incorrecta. El análisis de frecuencia de espectro no es un tipo de análisis típico en IAST. Los otros tipos (A, B, C) son correctos y se utilizan para evaluar la cobertura, inconsistencias y patrones de seguridad en la aplicación."
    },
    {
        "question": "Señalar la respuesta correcta. Apreciar el nivel de entrenamiento y conciencia de los individuos que no forman parte del equipo de recuperación/respuesta se corresponde al área de la auditoría de un Plan de Recuperación ante Desastres:",
        "options": [
            "La resiliencia del sistema.",
            "Copias de seguridad y restauración de datos.",
            "Verificar la integridad y precisión del DRP.",
            "Evaluar el desempeño del personal involucrado en el DRP."
        ],
        "answer": 3,
        "explanation": "La opción D es correcta. Evaluar el desempeño del personal involucrado en el DRP incluye apreciar su nivel de entrenamiento y conciencia, lo cual es crucial para la efectividad del plan de recuperación ante desastres. Las otras opciones se centran en aspectos técnicos (A, B, C) más que en el entrenamiento del personal."
    },
    {
        "question": "Señalar la respuesta incorrecta. Para realizar un DRP se debería seguir las siguientes fases:",
        "options": [
            "Alinearlo con el plan de continuidad de negocio.",
            "Actualizar y mejorar el plan estratégico.",
            "Capacitar a los encargados de ponerlo en marcha, concienciar y difundir el plan.",
            "Realizar pruebas."
        ],
        "answer": 1,
        "explanation": "La opción B es incorrecta. El DRP no se centra en actualizar el plan estratégico, sino en garantizar la continuidad operativa ante desastres. Las otras opciones (A, C, D) son fases clave del DRP: alineación con el plan de continuidad, capacitación del personal y realización de pruebas para validar el plan."
    },
    {
        "question": "El incorporar una característica en la aplicación como “Capacidad de autocontrol y de limitar el uso de los recursos” corresponde al Principio de diseño:",
        "options": [
            "Fallar de Forma Segura.",
            "Diseño de software resistente.",
            "La seguridad por oscuridad: error.",
            "Entorno de producción o ejecución inseguro."
        ],
        "answer": 1,
        "explanation": "La capacidad de autocontrol y limitación de recursos está relacionada con el principio de diseño de software resistente, que busca que el sistema continúe funcionando adecuadamente ante condiciones inesperadas o adversas."
    },
    {
        "question": "El modelado de ataques es aplicable en las siguientes fases del ciclo de vida del desarrollo del software:",
        "options": [
            "Requisitos, Diseño, Codificación, Pruebas, Despliegue y Operación.",
            "Requisitos, Diseño, Codificación, Pruebas y Operación.",
            "Requisitos, Codificación, Pruebas, Despliegue y Operación.",
            "Requisitos, Diseño, Pruebas, Despliegue y Operación."
        ],
        "answer": 0,
        "explanation": "El modelado de ataques puede aplicarse en todas las fases del ciclo de vida del software, desde la recolección de requisitos hasta la operación, para identificar y mitigar posibles amenazas en cada etapa."
    },
    {
        "question": "Señalar la respuesta incorrecta. Algunas de las opciones específicas de diseño del software que lo simplifican son:",
        "options": [
            "El uso de técnicas de interrupciones en lugar de sondeo.",
            "Favorecer procesos deterministas sobre los no deterministas.",
            "Desacoplar los componentes y procesos para minimizar las interdependencias entre ellos.",
            "Limitar el número de estados posibles en el software."
        ],
        "answer": 0,
        "explanation": "El uso de interrupciones en lugar de sondeo puede complicar el diseño por la introducción de asincronía y dificultad en la depuración, por lo que no siempre simplifica el software."
    },
    {
        "question": "Cuál fue el primer ataque de desbordamiento de búfer (buffer overflows).",
        "options": [
            "Code Red.",
            "Gusano Morris.",
            "SQL Slammer.",
            "Love Bug."
        ],
        "answer": 1,
        "explanation": "El gusano Morris, lanzado en 1988, fue uno de los primeros ataques informáticos masivos que aprovechó una vulnerabilidad de desbordamiento de búfer en UNIX para propagarse."
    },
    {
        "question": "Una validación correcta de la entrada requiere todo lo siguiente:",
        "options": [
            "Utilizar listas negras, en las cuales el objetivo es casi imposible de identificar todas las cosas que posiblemente podrían ser malas.",
            "Usar una estrategia como la selección indirecta o whitelisting que se enfoca en la identificación de la entrada que se sabe está bien.",
            "Identificar las fuentes de entrada mas importantes del programa",
            "Todas las anteriores."
        ],
        "answer": 3,
        "explanation": "Una validación correcta implica usar listas blancas (whitelisting), identificar fuentes de entrada y comprender los riesgos de las listas negras. Por tanto, todas las anteriores son parte de una buena estrategia de validación."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los fallos de programación más comunes que se pueden cometer con las funciones de string limitadas son:",
        "options": [
            "El buffer de destino se deja sin un terminador nulo.",
            "El buffer de destino se desborda porque el límite depende del tamaño de los datos de la fuente, más bien que del tamaño del buffer de destino.",
            "El programa escribe a una posición arbitraria en la memoria porque el buffer de destino se termina con el carácter nulo.",
            "El buffer de destino se desborda porque su límite se especifica como el tamaño total del buffer más bien que como el espacio restante."
        ],
        "answer": 2,
        "explanation": "Terminar correctamente un string con un carácter nulo no causa escritura en una posición arbitraria de memoria; esto más bien ayuda a evitar errores de memoria. Las demás opciones sí representan errores comunes."
    },
    {
        "question": "Para conseguir que el desarrollo de una aplicación posea las propiedades y principios de diseño del software seguro, se necesita que el personal de diseño y desarrollo desarrollen dos perspectivas:",
        "options": [
            "Perspectiva administrador.",
            "Perspectiva atacante y defensor.",
            "Perspectiva usuario.",
            "Perspectiva defensor."
        ],
        "answer": 1,
        "explanation": "El desarrollo de software seguro requiere que los desarrolladores piensen como atacantes para anticipar amenazas y como defensores para implementar medidas de protección eficaces."
    },
    {
        "question": "¿Cuál es la mejor forma de prevenir ataques de Inyección SQL?",
        "options": [
            "Descentralizar la lógica de validación.",
            "Comprobar la longitud de la entrada.",
            "Realizar consultas parametrizadas.",
            "Comprobar el tamaño de los datos de entrada."
        ],
        "answer": 2,
        "explanation": "El uso de consultas parametrizadas es la mejor forma de prevenir ataques de inyección SQL, ya que evita que los datos del usuario se interpreten como parte del código SQL."
    },
    {
        "question": "Normalmente se suele asignar un usuario general con conjunto de privilegios que le permitirá realizar todas las tareas, incluidas las no necesarias. Ejemplos de errores comunes son:",
        "options": [
            "Instalación de aplicaciones y servicios con el usuario de administrador.",
            "Servicios y procesos con privilegios por tiempo definido.",
            "Usuarios con derechos normales.",
            "Aplicación de derechos normales."
        ],
        "answer": 0,
        "explanation": "Un error común de configuración de privilegios es instalar o ejecutar aplicaciones con el usuario administrador, lo que aumenta el riesgo de explotación si la aplicación es comprometida."
    },
    {
        "question": "¿Cuándo se da lugar, de forma general, un ataque de desbordamiento de búfer?",
        "options": [
            "Cuando se escribe en la memoria apuntada por un puntero que no ha sido liberada.",
            "Cuando copia un búfer de la pila al heap.",
            "Cuando un puntero es usado para acceder a memoria no apuntada por él.",
            "Cuando el programa detecta que el búfer está lleno."
        ],
        "answer": 2,
        "explanation": "Un ataque de desbordamiento de búfer ocurre cuando un puntero accede a una dirección de memoria que no le corresponde, lo que puede sobrescribir datos críticos y permitir la ejecución de código malicioso. La opción A es incorrecta porque escribir en memoria liberada no es un desbordamiento de búfer, sino un uso de memoria después de liberarla (use-after-free). La opción B es incorrecta porque copiar un búfer de la pila al heap no necesariamente implica un desbordamiento. La opción D es incorrecta porque el programa no detecta automáticamente el desbordamiento; este ocurre cuando se escribe más allá del límite del búfer."
    },
    {
        "question": "La comprobación de la eficacia de las salvaguardas implementadas para proteger una aplicación, se realiza principalmente mediante el siguiente tipo de pruebas:",
        "options": [
            "Análisis de código.",
            "Fuzzing testing.",
            "Análisis híbrido.",
            "Pruebas de Penetración."
        ],
        "answer": 3,
        "explanation": "Las pruebas de penetración permiten verificar si las salvaguardas de seguridad implementadas realmente protegen la aplicación frente a ataques reales o simulados."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los factores principales prácticos que determinan la utilidad de una herramienta de análisis estático son:",
        "options": [
            "El equilibrio que la herramienta hace entre la extensión del código fuente y el tipo de lenguaje de programación.",
            "Porcentaje de falsos positivos y falsos negativos de la herramienta.",
            "El conjunto de errores que la herramienta comprueba.",
            "Las características de la herramienta para hacerla fácil de usar."
        ],
        "answer": 0,
        "explanation": "El equilibrio entre extensión del código y lenguaje de programación no es un factor práctico determinante. Los factores clave incluyen precisión (falsos positivos/negativos), cobertura de errores y facilidad de uso."
    },
    {
        "question": "La superficie de ataque, es cualquier parte de la aplicación que es accesible por:",
        "options": [
            "Personas.",
            "Personas y aplicaciones.",
            "Otra aplicación.",
            "Ninguna de las anteriores."
        ],
        "answer": 1,
        "explanation": "La superficie de ataque abarca cualquier punto de entrada a la aplicación accesible tanto por usuarios como por otras aplicaciones, ya que ambas pueden ser vectores de ataque."
    },
    {
        "question": "¿Cuál es la razón PRINCIPAL para que una aplicación sea susceptible de un ataque del Hombre en el Medio (MITM)?",
        "options": [
            "Gestión inadecuada de la sesión.",
            "Falta de auditoría.",
            "Archivo inadecuado.",
            "La falta de cifrado."
        ],
        "answer": 3,
        "explanation": "La falta de cifrado en las comunicaciones permite a un atacante interceptar y modificar los datos transmitidos entre dos partes, facilitando un ataque MITM."
    },
    {
        "question": "¿Durante qué fase del ciclo de vida del desarrollo de software (SDLC) se inicia el modelado de amenazas?",
        "options": [
            "Análisis de requisitos.",
            "Pruebas.",
            "Aplicación.",
            "Despliegue."
        ],
        "answer": 0,
        "explanation": "El modelado de amenazas se inicia en la fase de análisis de requisitos para identificar posibles amenazas desde el inicio del diseño y tomar medidas preventivas."
    },
    {
        "question": "Los mensajes de error verbosos y las excepciones no manejadas pueden dar lugar a que de las siguientes amenazas a la seguridad del software:",
        "options": [
            "Spoofing.",
            "Manipulación.",
            "Repudio.",
            "Divulgación de información."
        ],
        "answer": 3,
        "explanation": "Los mensajes de error verbosos pueden revelar detalles internos de la aplicación (como estructura de base de datos o rutas del sistema), lo cual puede facilitar la divulgación de información sensible."
    },
    {
        "question": "Para cumplir con los objetivos de seguridad de software, al aceptar el software, la fase de adquisición debe incluir procesos para:",
        "options": [
            "Verificar que se proporcionen guías de instalación y manuales de entrenamiento.",
            "Evaluar la presencia y la eficacia de los mecanismos de protección.",
            "Validar los productos de software del proveedor.",
            "Ayudar al vendedor a responder a la solicitud de propuestas."
        ],
        "answer": 1,
        "explanation": "La evaluación de la eficacia de los mecanismos de protección implementados en el software es esencial para garantizar que cumple con los objetivos de seguridad durante la adquisición."
    },
    {
        "question": "Señalar la respuesta correcta. Cual de las siguientes respuestas no es una causa de aparición de vulnerabilidades en el software:",
        "options": [
            "No realización de pruebas seguridad basadas en riesgo.",
            "Cambios de requisitos del proyecto durante la etapa de especificación.",
            "Mezcla de código proveniente de varios orígenes",
            "Tamaño excesivo y complejidad de las aplicaciones."
        ],
        "answer": 1,
        "explanation": "Los cambios de requisitos durante la especificación pueden ser normales y no necesariamente introducen vulnerabilidades si están bien gestionados. Las demás opciones sí son causas frecuentes de fallos de seguridad."
    },
    {
        "question": "Señalar la respuesta correcta. En la actualidad ha quedado patente la insuficiencia de las protecciones a nivel de infraestructura debido a:",
        "options": [
            "La aparición de malware avanzado.",
            "La implantación incorrecta de políticas de seguridad corporativas.",
            "La obsolescencia de las tecnologías de protección a nivel de red.",
            "El aumento de los ataques en la capa de aplicación de debidos a software vulnerable."
        ],
        "answer": 3,
        "explanation": "Las protecciones a nivel de red no bastan cuando los ataques se dirigen a vulnerabilidades específicas del software en la capa de aplicación, lo que evidencia la necesidad de enfoques de seguridad integrados."
    },
    {
        "question": "Señalar la respuesta correcta. Respecto a la lógica de validación de entradas:",
        "options": [
            "No tiene por qué comprobarse la longitud de entrada como parte de la validación frontal.",
            "La lógica de validación back-end siempre debería comprobar la longitud de la entrada contra un mínimo y máximo.",
            "Todas las anteriores.",
            "Si el programa tiene que validar un campo de entrada, cuanto más sepa la lógica de validación de los valores legales para ese campo, más rigurosa puede ser la validación."
        ],
        "answer": 2,
        "explanation": "Todas las afirmaciones son válidas: la validación debe ser robusta y aplicada tanto en el cliente como en el servidor, considerando longitud, formato y valores permitidos."
    },
    {
        "question": "Señalar la respuesta correcta. Respecto al tipo de análisis Taint Propagation:",
        "options": [
            "Analiza una función individualmente en cuanto a caminos de ejecución y eliminar caminos falsos, que son caminos por los cuales el código nunca puede ejecutarse porque son lógicamente incoherentes.",
            "Análisis de flujo de datos para determinar qué es lo que un atacante puede controlar, se requiere saber por dónde entra la información en el programa y cómo se mueve a través de él.",
            "Para propiedades temporales de seguridad como «la memoria solo debería ser liberada una vez» y «solo los punteros no nulos deberían ser referenciados» es fácil representarlas como pequeños autómatas de estado finito.",
            "Los alias de los punteros son otra clase de problema del flujo de datos. La finalidad del análisis de alias es determinar qué punteros apuntan a la misma posición de memoria."
        ],
        "answer": 1,
        "explanation": "El análisis de propagación de contaminación (Taint Propagation) rastrea los datos no confiables a lo largo del flujo del programa para identificar posibles vías de explotación."
    },
    {
        "question": "Señalar la respuesta correcta. Una aplicación guarda los datos de usuario confidenciales de un sistema en un archivo XML. El archivo no puede ser leído por usuarios anónimos, pero puede ser leído por cualquier usuario que esté autenticado en la aplicación. De acuerdo con la documentación de la aplicación, si una organización desea agregar una protección adicional a este archivo, puede cambiar las listas de control de acceso (ACL) del sistema de archivos para que sólo en el contexto de seguridad que se utiliza sean los administradores locales los que puedan acceder a este archivo. La documentación de la aplicación proporciona además los pasos de configuración manual (aproximadamente 5-7 pasos) necesarios para lograr esto. ¿Qué principio de diseño seguro infringe este escenario?",
        "options": [
            "Modelado de amenazas.",
            "Menos Privilegio.",
            "Defensa en Profundidad.",
            "Seguridad por defecto."
        ],
        "answer": 3,
        "explanation": "El principio de Seguridad por defecto establece que el sistema debe estar configurado de manera segura desde el inicio. Requerir múltiples pasos manuales para proteger un archivo crítico infringe este principio."
    },
    {
        "question": "Señalar la respuesta correcta. Una librería que maneja string de forma segura, intentará asegurar lo siguiente:",
        "options": [
            "Que las cadenas han sido validadas correctamente.",
            "Las funciones de manejo de cadenas de la biblioteca segura se puede intercambiar sin modificar nada con las funciones de la biblioteca estándar de cadena, y viceversa.",
            "Ninguna de las anteriores.",
            "Que hay espacio suficiente en una cadena de origen y / o destino para realizar operaciones como concatenación, copia, etc."
        ],
        "answer": 3,
        "explanation": "El manejo seguro de cadenas implica asegurar que siempre haya espacio suficiente para evitar desbordamientos, especialmente en operaciones como concatenación o copia."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Cuál es el siguiente principio de diseño de seguridad del Software: “Estrategia de protección consistente en introducir múltiples capas de seguridad, que permitan reducir la probabilidad de compromiso en caso de que una de las capas falle y en el peor de los casos minimizar el impacto”?",
        "options": [
            "Mínimo privilegio.",
            "Simplicidad.",
            "Ninguna de las anteriores.",
            "Defensa en profundidad."
        ],
        "answer": 3,
        "explanation": "El principio descrito es 'Defensa en profundidad', que consiste en implementar múltiples capas de seguridad para evitar que el fallo de una sola capa comprometa todo el sistema."
    },
    {
        "question": "Señalar la respuesta correcta. Pruebas que consisten en la introducción de datos no válidos (por lo general producido por la modificación de una entrada válida) al software a través de su entorno o a través de otro componente de mismo, son pruebas del tipo:",
        "options": [
            "Inyección de fallos en código fuente.",
            "Análisis código binario.",
            "Inyección de fallos en binarios.",
            "Fuzz testing."
        ],
        "answer": 3,
        "explanation": "El 'Fuzz testing' consiste en enviar datos malformados o inesperados para detectar fallos y vulnerabilidades en una aplicación, es una técnica muy utilizada para pruebas de robustez."
    },
    {
        "question": "Señalar la respuesta incorrecta. Las fuentes de las vulnerabilidades se deben a:",
        "options": [
            "Fallos provenientes de la codificación de los diseños del software realizados.",
            "Fallos provenientes de la cadena de distribución del software.",
            "Los sistemas hardware o software contienen frecuentemente fallos de diseño que pueden ser utilizados para realizar un ataque.",
            "La instalación de software por defecto implica por lo general la instalación de servicios que no se usan, pero que pueden presentar debilidades que comprometan la maquina."
        ],
        "answer": 0,
        "explanation": "Las vulnerabilidades no se originan en la codificación de diseños como tal, sino en una mala implementación del diseño o en diseños inseguros. La afirmación es ambigua y menos precisa que el resto, que sí identifican fuentes claras de vulnerabilidades."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los elementos clave de un proceso de S-SDLC son:",
        "options": [
            "Gestión de configuración de versiones.",
            "Pruebas de seguridad.",
            "Despliegue y distribución.",
            "Hitos de control en las fases del SDLC."
        ],
        "answer": 2,
        "explanation": "El despliegue y distribución no es considerado un elemento clave específico del enfoque de ciclo de vida de desarrollo de software seguro (S-SDLC). Los demás son elementos fundamentales para garantizar seguridad durante el desarrollo."
    },
    {
        "question": "Señale la respuesta correcta. ¿Cuál de las siguientes fases del ciclo de vida de una vulnerabilidad no lo es?",
        "options": [
            "Verificación inicial de la vulnerabilidad",
            "Descubrimiento",
            "Validación final por el usuario.",
            "Solución: los programadores del producto buscan solución en entornos controlados."
        ],
        "answer": 2,
        "explanation": "La 'Validación final por el usuario' no forma parte formal del ciclo de vida de una vulnerabilidad. Las demás fases son reconocidas dentro del ciclo: descubrimiento, verificación y corrección."
    },
    {
        "question": "Señalar la respuesta correcta. Las excepciones tienen dos versiones, la diferencia tiene que ver con si el compilador usará análisis estático para asegurar que la excepción es manejada:",
        "options": [
            "Valores de retorno.",
            "Controladas y no controladas",
            "Comprobadas y no comprobadas.",
            "Ningunas de las anteriores."
        ],
        "answer": 2,
        "explanation": "Las excepciones comprobadas y no comprobadas (checked/unchecked) difieren en que las primeras deben ser gestionadas explícitamente en tiempo de compilación, y las segundas no."
    },
    {
        "question": "Señalar la respuesta correcta. Los requerimientos no funcionales de seguridad deben especificar:",
        "options": [
            "Propiedades del Software funcionales.",
            "Especificaciones de las salvaguardas de seguridad",
            "Propiedades que el software debe exhibir.",
            "Todas las anteriores."
        ],
        "answer": 3,
        "explanation": "Los requisitos no funcionales de seguridad incluyen salvaguardas, comportamientos esperados y medidas que pueden influir incluso en aspectos funcionales del software."
    },
    {
        "question": "Señalar la respuesta correcta. Un equipo de desarrollo está iniciando un ciclo de desarrollo de software y planea llevar a cabo tests de penetración en algún momento. ¿En qué etapa del ciclo de desarrollo recomendarías llevar a cabo el test de intrusión?",
        "options": [
            "Al finalizar el diseño inicial de la aplicación.",
            "Cuándo se consigue ejecutar la aplicación con éxito por primera vez.",
            "Cuándo la aplicación está cerca del final del ciclo de desarrollo, en la fase de operación y mantenimiento.",
            "Todas las anteriores."
        ],
        "answer": 3,
        "explanation": "Lo ideal es realizar pruebas de penetración en varias fases del desarrollo, desde diseño hasta despliegue y operación, para detectar problemas de seguridad en diferentes niveles."
    },
    {
        "question": "Señalar la respuesta correcta. La principal misión de los test de penetración es:",
        "options": [
            "Comprobar las vulnerabilidades del software.",
            "Revisar estáticamente el código del sistema.",
            "Probar la seguridad de la arquitectura del software.",
            "Verificar cómo el software se comporta y resiste ante diferentes tipos de ataque."
        ],
        "answer": 3,
        "explanation": "La finalidad de los test de penetración es evaluar la resistencia del sistema ante ataques reales, comprobando su comportamiento frente a amenazas concretas."
    },
    {
        "question": "Señalar la respuesta incorrecta. El análisis estático de código fuente es adecuado para identificar problemas de seguridad por ciertas razones:",
        "options": [
            "Examinando el código en sí mismo, las herramientas de análisis estático a menudo pueden indicar la causa de origen de un problema de seguridad, no solamente uno de sus síntomas.",
            "Las herramientas de análisis estático comprueban el código a fondo y coherentemente, sin ninguna tendencia, que a veces los programadores según su criterio podrían tener sobre algunas partes del código que pudieran ser más «interesantes» desde una perspectiva de seguridad o partes del código que pudieran ser más fáciles para realizar las pruebas dinámicas",
            "El análisis estático puede encontrar errores tempranamente en el desarrollo, aún antes de que el programa sea ejecutado por primera vez.",
            "Cuando un investigador de seguridad descubre una nueva variedad de ataque, las herramientas de análisis estático, no ayudan a comprobar de nuevo una gran cantidad de código para ver dónde el nuevo ataque podría tener éxito."
        ],
        "answer": 3,
        "explanation": "El análisis estático sí puede ser adaptado a nuevas amenazas y reutilizado sobre bases de código ya existentes, por lo tanto la afirmación es incorrecta."
    },
    {
        "question": "Señalarla respuesta correcta. A la hora de realizar la distribución y despliegue del software desarrollado, es recomendable el realizar las siguientes buenas prácticas:",
        "options": [
            "Distribuir el software con una configuración por defecto segura y lo más restrictiva posible.",
            "Proporcionar una herramienta de instalación automática.",
            "Cambio los valores de configuración predeterminados durante el desarrollo.",
            "Todas las anteriores"
        ],
        "answer": 3,
        "explanation": "Todas las prácticas mencionadas contribuyen a una distribución más segura del software, evitando configuraciones inseguras por defecto y facilitando instalaciones consistentes."
    },
    {
        "question": "Señalar la respuesta correcta. Indique de las siguientes respuestas, cual no es una causa de aparición de vulnerabilidades en el software.",
        "options": [
            "Cambios de requisitos del proyecto durante la etapa de especificación.",
            "No realización de pruebas seguridad basadas en riesgo.",
            "Tamaño excesivo y complejidad de las aplicaciones.",
            "Mezcla de código proveniente de varios orígenes"
        ],
        "answer": 0,
        "explanation": "Los cambios de requisitos durante la especificación son comunes en el desarrollo y no constituyen en sí mismos una causa directa de vulnerabilidades, a diferencia de las demás opciones."
    },
    {
        "question": "Señalar la respuesta correcta. Respecto a la lógica de validación de entradas.",
        "options": [
            "La lógica de validación front-end siempre debería comprobar la longitud de la entrada contra un máximo.",
            "No tiene porque comprobarse la longitud de entrada como parte de la validación frontal.",
            "Si el programa tiene que validar un campo de entrada, cuanto más sepa la lógica de validación de los valores legales para ese campo, más rigurosa puede ser la validación.",
            "Todas las anteriores."
        ],
        "answer": 3,
        "explanation": "Todas las afirmaciones son correctas: una validación eficaz incluye controles en el front-end, back-end y conocimiento del contexto y formato esperado del dato."
    },
    {
        "question": "Señalar la respuesta correcta. La pila es la zona de memoria para guardar:",
        "options": [
            "Librerías linkadas dinámicamente.",
            "Código del programa.",
            "Variables globales.",
            "Variables locales."
        ],
        "answer": 3,
        "explanation": "La pila (stack) se utiliza para almacenar variables locales, parámetros de funciones y realizar el seguimiento del flujo de ejecución."
    },
    {
        "question": "Señalar la respuesta correcta. Aplicar el principio de defensa en profundidad significa:",
        "options": [
            "Diseñar una aplicación con múltiples capas de defensa, de esta manera, si una capa falla, otro nivel puede proveer protección.",
            "Diseñar una aplicación con un único punto de defensa, situado en el perímetro de la aplicación (sockets de red, APIs externas, etc.)",
            "Ninguna de las anteriores.",
            "Diseñar una aplicación con un único punto de defensa, situado en los puntos de consumo de datos externos."
        ],
        "answer": 0,
        "explanation": "La defensa en profundidad consiste en implementar múltiples capas de seguridad para mitigar los efectos de una posible falla en una de ellas."
    },
    {
        "question": "Señalar la respuesta correcta. ¿Cuál de las siguientes afirmaciones sobre la seguridad del software es correcta?",
        "options": [
            "Arreglar errores y debilidades del software después de ponerlo en producción es más dificultoso y económicamente caro.",
            "Los desarrolladores en su mayoría tienen conocimientos profundos de seguridad el software.",
            "Incluir prácticas de seguridad como “Análisis del riesgo Arquitectónico” puede resultar en la comisión de errores en el diseño que resulten en futuras debilidades en el software.",
            "Todas las anteriores."
        ],
        "answer": 0,
        "explanation": "Corregir errores en producción es más costoso y complicado. Las otras opciones no son acertadas: la mayoría de desarrolladores no dominan seguridad, y el análisis de riesgos reduce errores, no los causa."
    },
    {
        "question": "Señalar la respuesta correcta. Indicar la utilidad de los Patrones de Ataque en la etapa de Especificación de requisitos.",
        "options": [
            "Pueden ser utilizados para orientar las pruebas de seguridad del software en un contexto práctico y realista identificando debilidades concretas para generar casos de prueba para cada componente.",
            "Permitirá la selección de políticas de seguridad y configuraciones acordes a las amenazas obtenidas de los patrones de ataque.",
            "Proporciona ejemplos de ataques que aprovechan las vulnerabilidades de la arquitectura elegida.",
            "Ayuda a definir el comportamiento del sistema para prevenir o reaccionar ante un tipo específico de ataque probable."
        ],
        "answer": 0,
        "explanation": "Los patrones de ataque permiten prever posibles vectores de explotación desde fases tempranas y ayudan a orientar las pruebas de seguridad desde la etapa de requisitos."
    },
    {
        "question": "Señalar la respuesta incorrecta. Los factores que influyen en la probabilidad de que un software sea consistente con las propiedades de seguridad de un software, incluyen:",
        "options": [
            "Conocimiento Profesional.",
            "Componentes adquiridos.",
            "Herramientas de desarrollo.",
            "Configuraciones del entorno de desarrollo."
        ],
        "answer": 1,
        "explanation": "Los componentes adquiridos pueden aportar vulnerabilidades, pero no son un factor directo de consistencia del software con propiedades de seguridad, a diferencia de los otros elementos."
    },
    {
        "question": "Señalar la respuesta incorrecta. Dentro del marco del principio de diseño “Fallar de Forma Segura” las características específicas del diseño que minimizan la probabilidad de que el software pase a un estado inseguro son:",
        "options": [
            "Implementar una lógica de control de excepciones.",
            "El software puede comenzar su ejecución en un estado inseguro y terminar en un estado seguro.",
            "Evitar problemas de sincronización y secuenciación.",
            "Implementar temporizadores tipo «watchdog»."
        ],
        "answer": 1,
        "explanation": "El principio de 'Fallar de Forma Segura' implica que el sistema debe empezar en un estado seguro y mantenerse así en caso de error. Iniciar en un estado inseguro contradice este principio."
    },
    {
        "question": "Señalar la respuesta correcta. A cuál de los elementos clave de un proceso de S-SDLC le corresponde la siguiente actividad “Desinfección completa de ejecutables, antes de la transferencia al sitio de descarga o medios de distribución, para evitar la inclusión de software malicioso en el mismo, datos incrustados sensibles, puertas traseras del desarrollador, etc.”:",
        "options": [
            "Herramientas de apoyo al desarrollo.",
            "Hitos de control en las fases del SDLC.",
            "Despliegue y distribución segura.",
            "Arquitectura y diseño adecuados."
        ],
        "answer": 2,
        "explanation": "La actividad descrita corresponde al proceso de distribución segura del software, asegurando que el ejecutable final esté libre de malware u otras amenazas antes de su entrega."
    }
]